Спецификация языка ~G (L-A~G)
~G — это интерпретируемый процедурный язык программирования с динамической типизацией, разработанный Grepleon. Язык ориентирован на простоту, минималистичный синтаксис и быстрое прототипирование консольных приложений.

Ключевые особенности:
Минималистичный синтаксис: Код легко читается и пишется. Используются символы ~, !, @, # для ключевых конструкций.

Динамическая типизация: Переменные не требуют явного объявления типа. Типы определяются в runtime.

Процедурная парадигма: Поддерживаются переменные, условные операторы, циклы, списки (массивы).

Встроенный ввод/вывод: Операторы ~> (вывод) и ~< (ввод) делают работу с консолью элементарной.

Условные операторы:

~? — аналог if.

!~? — аналог else if / elif.

!~ — аналог else.

# — закрытие блока условий (аналог endif).

Циклы:

@? — аналог цикла while.

# — закрытие блока цикла.

Работа со списками:

~>> — оператор добавления элемента в список (аналог append()).

~<< — оператор удаления элемента по индексу (аналог pop(index)).

Пример кода на ~G
Space = " ";   
K = "Hello" + Space;
~> K + "world. K";

a = 5;
~> "Введите число:";
~< b;
~> "Сумма: " + str(a+int(b));

~? int(b) == 5;
    ~> "Вы ответили так же, как и я в первый раз";
#;

!~? int(b) == 2;
    ~> "Вы ответили так же, как и я во второй раз";
#;

!~ e;
    ~> "Ну, ты и дурак"
#;

n = 2;

@? int(n) != 10;

    ~> "Угадай число";
    ~< n;
    ~> "Вы ввели " + str(n);
#;

~> "Верно! Это было 10!";

N = [1, 2, 3];

~> N;
N ~>> 4;
~> N;
N ~<< 0;
~> N;

i = 0;
c = 0;
@? i < 3;
    i = i + 1;
    ~< c;
    ~> str(i) + ". " + str(c);
#;




Сам код на ~G находится в переменной self.cod
